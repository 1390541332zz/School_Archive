// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/19/2017 09:12:59"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          P0Simulation
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module P0Simulation_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
reg E;
reg G;
reg H;
reg M;
reg N;
reg P;
reg Q;
reg V;
reg W;
reg X;
// wires                                               
wire F1;
wire F2;
wire F3;
wire F4;
wire G1;
wire G2;
wire G3;
wire G4;

// assign statements (if any)                          
P0Simulation i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.E(E),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.G(G),
	.G1(G1),
	.G2(G2),
	.G3(G3),
	.G4(G4),
	.H(H),
	.M(M),
	.N(N),
	.P(P),
	.Q(Q),
	.V(V),
	.W(W),
	.X(X)
);
initial 
begin 
#1000000 $finish;
end 

// A
always
begin
	A = 1'b0;
	A = #500000 1'b1;
	#500000;
end 

// B
always
begin
	B = 1'b0;
	B = #250000 1'b1;
	#250000;
end 

// C
always
begin
	C = 1'b0;
	C = #500000 1'b1;
	#500000;
end 

// D
always
begin
	D = 1'b0;
	D = #250000 1'b1;
	#250000;
end 

// E
always
begin
	E = 1'b0;
	E = #500000 1'b1;
	#500000;
end 

// G
always
begin
	G = 1'b0;
	G = #250000 1'b1;
	#250000;
end 

// H
always
begin
	H = 1'b0;
	H = #250000 1'b1;
	#250000;
end 

// M
always
begin
	M = 1'b0;
	M = #500000 1'b1;
	#500000;
end 

// N
always
begin
	N = 1'b0;
	N = #250000 1'b1;
	#250000;
end 

// X
always
begin
	X = 1'b0;
	X = #250000 1'b1;
	#250000;
end 

// P
always
begin
	P = 1'b0;
	P = #500000 1'b1;
	#500000;
end 

// Q
always
begin
	Q = 1'b0;
	Q = #250000 1'b1;
	#250000;
end 

// V
always
begin
	V = 1'b0;
	V = #500000 1'b1;
	#500000;
end 

// W
always
begin
	W = 1'b0;
	W = #250000 1'b1;
	#250000;
end 
endmodule

