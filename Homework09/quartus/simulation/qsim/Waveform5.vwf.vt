// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/24/2017 23:23:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          hw9
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module hw9_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg b;
reg c;
reg d;
reg e;
reg f;
// wires                                               
wire y;

// assign statements (if any)                          
hw9 i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.e(e),
	.f(f),
	.y(y)
);
initial 
begin 
#1000000 $stop;
end 

// a
always
begin
	a = 1'b0;
	a = #500000 1'b1;
	#500000;
end 

// b
always
begin
	b = 1'b0;
	b = #250000 1'b1;
	#250000;
end 

// c
always
begin
	c = 1'b0;
	c = #125000 1'b1;
	#125000;
end 

// d
always
begin
	d = 1'b0;
	d = #62500 1'b1;
	#62500;
end 

// e
always
begin
	e = 1'b0;
	e = #31250 1'b1;
	#31250;
end 

// f
always
begin
	f = 1'b0;
	f = #15625 1'b1;
	#15625;
end 
endmodule

